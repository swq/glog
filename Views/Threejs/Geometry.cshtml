@{
    ViewBag.Title = "Index";
}
<link href="@Url.Content("~/Content/bootstrap.min.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/AdminLTE.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/Skin/skin-blue.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/font-awesome/font-awesome.min.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/SpreadJS_CSS/gc.spread.sheets.excel2016colorful.10.0.1.css")" rel="stylesheet" />
@*<link href="@Url.Content("~/Content/SpreadJS_CSS/gcspread.sheets.excel2016colorful.9.40.20161.0.css")" rel="stylesheet" />*@
<link href="@Url.Content("~/Content/Tree/metroStyle.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/select2/select2.min.css")" rel="stylesheet" />
<div class="row">
    <div class="col-md-12" id="main_box">
        <div class="box box-primary direct-chat direct-chat-primary">
            <div class="box-header with-border">
                <h4 class="box-title" style="float:left;margin-top:5px">3D演练几何形状及材质：</h4>
                <div class="box-tools pull-right">
                    <button type="button" class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                    <button type="button" class="btn btn-box-tool" data-toggle="tooltip" title="Contacts" data-widget="chat-pane-toggle">
                        <i class="fa fa-comments"></i>
                    </button>
                </div>
            </div>
            <div class="box-body box-profile">
                <div style="float:left">
                    <h3>立方体：</h3>
                    <canvas id="CubeCanvas" style="width:400px;height:300px"></canvas>
                </div>
                <div style="float:left">
                    <h3>平面：</h3>
                    <canvas id="PlaneCanvas" style="width:400px;height:300px"></canvas>
                </div>
                <div style="float:left">
                    <h3>球：</h3>
                    <canvas id="SphereCanvas" style="width:400px;height:300px"></canvas>
                </div>
                <div style="float:left">
                    <h3>半球：</h3>
                    <canvas id="HalfSphereCanvas" style="width:400px;height:300px"></canvas>
                </div>
                <div style="float:left">
                    <h3>圆形：</h3>
                    <canvas id="CircleCanvas" style="width:400px;height:300px"></canvas>
                </div>
                <div style="float:left">
                    <h3>扇形：</h3>
                    <canvas id="SectorCanvas" style="width:400px;height:300px"></canvas>
                </div>
                <div style="float:left">
                    <h3>圆柱：</h3>
                    <canvas id="CylinderCanvas" style="width:400px;height:300px"></canvas>
                </div>
                <div style="float:left">
                    <h3>圆台：</h3>
                    <canvas id="ChangeCylinderCanvas" style="width:400px;height:300px"></canvas>
                </div>
                <div style="float:left">
                    <h3>正四面体：</h3>
                    <canvas id="TetrahedronCanvas" style="width:400px;height:300px"></canvas>
                </div>
                <div style="float:left">
                    <h3>正八面体：</h3>
                    <canvas id="OctahedronCanvas" style="width:400px;height:300px"></canvas>
                </div>
                <div style="float:left">
                    <h3>正二十面体：</h3>
                    <canvas id="IcosahedronCanvas" style="width:400px;height:300px"></canvas>
                </div>
                <div style="float:left">
                    <h3>圆环：</h3>
                    <canvas id="TorusCanvas" style="width:400px;height:300px"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="~/Scripts/jQuery-2.2.0.min.js"></script>
<script src="~/Scripts/bootstrap.min.js"></script>
<script src="~/Scripts/dist/app.min.js"></script>
<script src="~/Scripts/Threejs/three.js"></script>
<!--jq 增强div resize-->
<script src="~/Scripts/resize.js"></script>
<script type="text/javascript">

    //立方体
    //渲染器
    var renderer = new THREE.WebGLRenderer({
        canvas: document.getElementById('CubeCanvas')
    });
    renderer.setClearColor(0x000000); // black
    //场景
    var scene = new THREE.Scene();
    //照相机
    var camera = new THREE.OrthographicCamera(-2, 2, 1.5, -1.5, 1, 10);
    camera.position.set(0, 0, 1);
    scene.add(camera);

    var cube = new THREE.Mesh(new THREE.CubeGeometry(1, 2, 3, 2, 2, 3),
            new THREE.MeshBasicMaterial({
                color: 0xff0000,
                wireframe: true
            })
    );
    scene.add(cube);

    camera.position.set(2, 2, -1);
    camera.lookAt(new THREE.Vector3(0, 0, 0));
    renderer.render(scene, camera);

    //平面
    renderer = new THREE.WebGLRenderer({
        canvas: document.getElementById('PlaneCanvas')
    });
    renderer.setClearColor(0x000000);
    var scene = new THREE.Scene();
    scene.add(camera);
    cube = new THREE.Mesh(new THREE.PlaneGeometry(2, 2),
            new THREE.MeshBasicMaterial({
                color: 0xff0000,
                wireframe: true
            })
    );
    scene.add(cube);
    camera.position.set(2, 2, -1);
    camera.lookAt(new THREE.Vector3(0, 0, 0));
    renderer.render(scene, camera);
    //球
    renderer = new THREE.WebGLRenderer({
        canvas: document.getElementById('SphereCanvas')
    });
    renderer.setClearColor(0x000000);
    var scene = new THREE.Scene();
    scene.add(camera);
    cube = new THREE.Mesh(new THREE.SphereGeometry(1.5, 30,30),
            new THREE.MeshBasicMaterial({
                color: 0xff0000,
                wireframe: true
            })
    );
    scene.add(cube);
    camera.position.set(2, 2, -1);
    camera.lookAt(new THREE.Vector3(0, 0, 0));
    renderer.render(scene, camera);
    //半球
    renderer = new THREE.WebGLRenderer({
        canvas: document.getElementById('HalfSphereCanvas')
    });
    renderer.setClearColor(0x000000);
    var scene = new THREE.Scene();
    scene.add(camera);
    cube = new THREE.Mesh(new THREE.SphereGeometry(1.5, 30, 30, Math.PI / 2, Math.PI, Math.PI / 6, Math.PI / 2),
            new THREE.MeshBasicMaterial({
                color: 0xff0000,
                wireframe: true
            })
    );
    scene.add(cube);
    camera.position.set(2, 2, -1);
    camera.lookAt(new THREE.Vector3(0, 0, 0));
    renderer.render(scene, camera);
    //圆形
    renderer = new THREE.WebGLRenderer({
        canvas: document.getElementById('CircleCanvas')
    });
    renderer.setClearColor(0x000000);
    var scene = new THREE.Scene();
    scene.add(camera);
    cube = new THREE.Mesh(new THREE.CircleGeometry(1.5, 50),
            new THREE.MeshBasicMaterial({
                color: 0xff0000,
                wireframe: true
            })
    );
    scene.add(cube);
    camera.position.set(0, 0, -1);
    camera.lookAt(new THREE.Vector3(0, 0, 0));
    renderer.render(scene, camera);
    //扇形
    renderer = new THREE.WebGLRenderer({
        canvas: document.getElementById('SectorCanvas')
    });
    renderer.setClearColor(0x000000);
    var scene = new THREE.Scene();
    scene.add(camera);
    cube = new THREE.Mesh(new THREE.CircleGeometry(1.5, 50, Math.PI / 3*2, Math.PI / 3*5),
            new THREE.MeshBasicMaterial({
                color: 0xff0000,
                wireframe: true
            })
    );
    scene.add(cube);
    camera.position.set(0, 0, -1);
    camera.lookAt(new THREE.Vector3(0, 0, 0));
    renderer.render(scene, camera);
    //圆柱
    renderer = new THREE.WebGLRenderer({
        canvas: document.getElementById('CylinderCanvas')
    });
    renderer.setClearColor(0x000000);
    var scene = new THREE.Scene();
    scene.add(camera);
    cube = new THREE.Mesh(new THREE.CylinderGeometry(1, 1, 1.5, 20, 3),
            new THREE.MeshBasicMaterial({
                color: 0xff0000,
                wireframe: true
            })
    );
    scene.add(cube);
    camera.position.set(2, 1, 2);
    camera.lookAt(new THREE.Vector3(0, 0, 0));
    renderer.render(scene, camera);
    //圆台
    renderer = new THREE.WebGLRenderer({
        canvas: document.getElementById('ChangeCylinderCanvas')
    });
    renderer.setClearColor(0x000000);
    var scene = new THREE.Scene();
    scene.add(camera);
    cube = new THREE.Mesh(new THREE.CylinderGeometry(1, 1.5, 1.5, 20, 3),
            new THREE.MeshBasicMaterial({
                color: 0xff0000,
                wireframe: true
            })
    );
    scene.add(cube);
    camera.position.set(2, 1, 2);
    camera.lookAt(new THREE.Vector3(0, 0, 0));
    renderer.render(scene, camera);
    //正四面体
    renderer = new THREE.WebGLRenderer({
        canvas: document.getElementById('TetrahedronCanvas')
    });
    renderer.setClearColor(0x000000);
    var scene = new THREE.Scene();
    scene.add(camera);
    cube = new THREE.Mesh(new THREE.TetrahedronGeometry(1),
            new THREE.MeshBasicMaterial({
                color: 0xff0000,
                wireframe: true
            })
    );
    scene.add(cube);
    camera.position.set(1.5, 1, 2);
    camera.lookAt(new THREE.Vector3(0, 0, 0));
    renderer.render(scene, camera);
    //正八面体
    renderer = new THREE.WebGLRenderer({
        canvas: document.getElementById('OctahedronCanvas')
    });
    renderer.setClearColor(0x000000);
    var scene = new THREE.Scene();
    scene.add(camera);
    cube = new THREE.Mesh(new THREE.OctahedronGeometry(1),
            new THREE.MeshBasicMaterial({
                color: 0xff0000,
                wireframe: true
            })
    );
    scene.add(cube);
    camera.position.set(1.7, 1, 2);
    camera.lookAt(new THREE.Vector3(0, 0, 0));
    renderer.render(scene, camera);
    //正十二面体
    renderer = new THREE.WebGLRenderer({
        canvas: document.getElementById('IcosahedronCanvas')
    });
    renderer.setClearColor(0x000000);
    var scene = new THREE.Scene();
    scene.add(camera);
    cube = new THREE.Mesh(new THREE.IcosahedronGeometry(1),
            new THREE.MeshBasicMaterial({
                color: 0xff0000,
                wireframe: true
            })
    );
    scene.add(cube);
    camera.position.set(1.7, 1, 2);
    camera.lookAt(new THREE.Vector3(0, 0, 0));
    renderer.render(scene, camera);
    //环
    renderer = new THREE.WebGLRenderer({
        canvas: document.getElementById('TorusCanvas')
    });
    renderer.setClearColor(0x000000);
    var scene = new THREE.Scene();
    scene.add(camera);
    cube = new THREE.Mesh(new THREE.TorusGeometry(1, 0.2, 12, 18),
            new THREE.MeshBasicMaterial({
                color: 0xff0000,
                wireframe: true
            })
    );
    scene.add(cube);
    camera.position.set(1.7, 1, 2);
    camera.lookAt(new THREE.Vector3(0, 0, 0));
    renderer.render(scene, camera);
</script>
