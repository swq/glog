@{
    ViewBag.Title = "Index";
}
<link href="@Url.Content("~/Content/bootstrap.min.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/AdminLTE.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/Skin/skin-blue.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/font-awesome/font-awesome.min.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/SpreadJS_CSS/gc.spread.sheets.excel2016colorful.10.0.1.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/select2/select2.min.css")" rel="stylesheet" />
<link href="~/Content/themes/jquery-ui.min.css" rel="stylesheet" />
<h3><i>工程结构(TA)维护:</i></h3>
<div class="row">
    <div style="display:none">
        <img id="image1" src="~/Images/folder.png" alt="" width="15" height="15" />
        <img id="image2" src="~/Images/002.png" alt="" width="15" height="15" />
    </div>
    <div class="col-md-12">
        <div class="box box-primary direct-chat direct-chat-primary">
            <div class="box-header with-border">
                <h4 class="box-title" style="float:left;margin-top:5px">选择工程：&nbsp;&nbsp;</h4>
                <div style="width:200px;float:left">
                    <select class="form-control js-example-basic-single" style="width : 100%" id="Choise_PJ">
                    </select>
                </div>
                <div class="box-tools pull-right">
                    <button type="button" class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                    <button type="button" class="btn btn-box-tool" data-toggle="tooltip" title="Contacts" data-widget="chat-pane-toggle">
                        <i class="fa fa-comments"></i>
                    </button>
                </div>
            </div>
            <div class="box-body box-profile">
                <div class="col-md-12" id="main_box">
                    <div style="margin-top:1px">
                        <div class="btn-group" style='width: 100%; margin-left:1px;'>
                            <button class="btn btn-primary" type="button" id="btn_add">
                                <span class="fa fa-plus"></span>&nbsp;添加
                            </button>
                            <button class="btn btn-primary" type="button" id="btn_Save">
                                <span class="fa fa-save"></span>&nbsp;保存
                            </button>
                            <button class="btn btn-primary " type="button" id="btn_Delete">
                                <span class="fa fa-times"></span>&nbsp;删除
                            </button>
                            <button class="btn btn-primary " type="button" id="Clear">
                                <span class="fa fa-bookmark"></span>&nbsp;确认
                            </button>
                        </div>
                        <div id='ss' style='width: 100%; height: 600px;'></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="~/Scripts/jQuery-2.2.0.min.js"></script>
<script src="~/Scripts/bootstrap.min.js"></script>
<script src="~/Scripts/dist/app.min.js"></script>
<script src="~/Scripts/SpreadJS/gc.spread.sheets.all.10.0.1.min.js"></script>
<script src="~/Scripts/SpreadJS/gc.spread.excelio.10.0.1.min.js"></script>
<script src="~/Scripts/SpreadJS/gc.spread.sheets.resources.zh.10.0.1.min.js"></script>
<!--jq 增强div resize-->
<script src="~/Scripts/resize.js"></script>
<script src="~/Scripts/select2/select2.min.js"></script>
<script src="~/Scripts/select2/zh-CN.js"></script>
<script type="text/javascript">

    $(function () {
        //Set tree grid.
        var ns = GC.Spread.Sheets;
        function TreeNodeCellType() {

        }
        TreeNodeCellType.prototype = new ns.CellTypes.Text();

        TreeNodeCellType.prototype.paint = function (ctx, value, x, y, w, h, style, options) {
            var level = options.sheet.rowOutlines.getLevel(options.row);
            var nlevel = -1;
            if (options.row < options.sheet.getRowCount() - 1) {
                nlevel = options.sheet.rowOutlines.getLevel(options.row + 1);
            }
            var hoffset = (level + 2) * 12;
            x += hoffset;
            w -= hoffset;

            var image;
            if (nlevel > level) {
                image = document.getElementById('image1');
            }
            else {
                image = document.getElementById('image2');
            }

            var imageWidth = image.width, imageMagin = 3, imageLayoutWidth = imageWidth + imageMagin * 2;
            x += imageLayoutWidth;
            w -= imageLayoutWidth;
            GC.Spread.Sheets.CellTypes.Base.prototype.paint.apply(this, arguments);

            if (options.row == options.sheet.getRowCount() - 1) return; //last row

            if (nlevel > level) {
                var collapsed = options.sheet.rowOutlines.isCollapsed(options.row + 1);
                x -= imageLayoutWidth;
                w += imageLayoutWidth;
                var imageX = x + imageMagin, imageY = y + h / 2 - image.height / 2;
                x--;
                y += h / 2 - 3;
                ctx.save();
                ctx.fillStyle = "black";
                ctx.beginPath();
                if (collapsed) {
                    ctx.moveTo(x - 5, y);
                    ctx.lineTo(x, y + 3);
                    ctx.lineTo(x - 5, y + 6);
                } else {
                    ctx.moveTo(x, y);
                    ctx.lineTo(x, y + 5);
                    ctx.lineTo(x - 5, y + 5);
                }
                ctx.fill();
                ctx.restore();
                ctx.drawImage(image, imageX, imageY);
            }
            else {
                x -= imageLayoutWidth;
                w += imageLayoutWidth;
                var imageX = x + imageMagin, imageY = y + h / 2 - image.height / 2;
                x--;
                y += h / 2 - 3;
                ctx.save();
                ctx.drawImage(image, imageX, imageY);
                ctx.restore();
            }
        };
        // override getHitInfo to allow cell type get mouse messages
        TreeNodeCellType.prototype.getHitInfo = function (x, y, cellStyle, cellRect, context) {
            return {
                x: x,
                y: y,
                row: context.row,
                col: context.col,
                cellStyle: cellStyle,
                cellRect: cellRect,
                sheetArea: context.sheetArea
            };
        }

        TreeNodeCellType.prototype.processMouseDown = function (hitinfo) {
            var level = hitinfo.sheet.rowOutlines.getLevel(hitinfo.row);
            var hoffset = (level + 2) * 12 + hitinfo.cellRect.x;
            if (hitinfo.x < hoffset && hitinfo.x > hoffset - 10) {
                var collapsed = hitinfo.sheet.rowOutlines.isCollapsed(hitinfo.row + 1);
                hitinfo.sheet.rowOutlines.setCollapsed(hitinfo.row, !collapsed);
                hitinfo.sheet.invalidateLayout();
                hitinfo.sheet.repaint();
            }
        };

        function ColorCellType() {

        }
        ColorCellType.prototype = new ns.CellTypes.Text();
        ColorCellType.prototype.paintText = function (ctx, value, x, y, w, h, style, options, text, conditionalForeColor, opacity) {
            if (!text) {
                return;
            }
            ctx.save();
            ctx.beginPath();


            var fillStyle = style.foreColor,
                font = style.font;
            if (font && ctx.font !== font) {
                ctx.font = font;
            }

            var indent = 0,
                textIndent = style.textIndent,
                wordWrap = style.wordWrap,
                hAlign = style.hAlign,
                vAlign = style.vAlign,
                textDecoration = style.textDecoration,
                textAlign = "left",
                textBaseline = "alphabetic",
                adjX = 2,
                adjY = 2,
                textHeight = 0,
                lineHeight = options.lineHeight,
                lines = [],
                lineCount = 0,
                fontSize = options.fontInfo.fontSize;

            if (textIndent > 0) {
                indent = textIndent * 8;
            }

            //textAlign
            adjX += indent;
            if (hAlign === ns.HorizontalAlign.center) {
                adjX = w / 2;
                textAlign = "center";
            } else if (hAlign === ns.HorizontalAlign.right) {
                adjX = w - 1 - 2;   // - 2 is for the left and the right border line, - 1 is for begining from the left side of the right double line.
                adjX -= indent;
                textAlign = "right";
            }
            if (ctx.textAlign !== textAlign) {
                ctx.textAlign = textAlign;
            }

            var redString, blackString;
            if (text.length > 3) {
                redString = text.substring(text.length - 3, text.length);
                blackString = text.substring(0, text.length - 3);
            } else {
                redString = text;
            }

            var redStart = x;
            if (blackString) {
                var blackWidth = ctx.measureText(blackString).width;
                redStart += blackWidth;
                if (hAlign === ns.HorizontalAlign.center) {
                    adjX -= blackWidth / 2;
                } else if (hAlign === ns.HorizontalAlign.right) {
                    adjX -= (ctx.measureText(redString).width);
                }
                ctx.fillStyle = "black";
                ctx.fillText(blackString, x + adjX, y + options.lineHeight + adjY);
            }
            ctx.fillStyle = "red";

            ctx.fillText(redString, redStart + adjX, y + options.lineHeight + adjY);
            ctx.restore();
        };


        var spread = new GC.Spread.Sheets.Workbook($("#ss")[0]);
        spread.options.tabStripVisible = false;
        spread.options.showHorizontalScrollbar = false;
        spread.options.showVerticalScrollbar = false;

        var sheet = spread.getActiveSheet();

        sheet.suspendPaint();
        sheet.suspendEvent();
        sheet.rowOutlines.direction(GC.Spread.Sheets.Outlines.OutlineDirection.backward);
        sheet.getRange(-1, 0, -1, 1).cellType(new TreeNodeCellType());

        sheet.setValue(0, 0, "Permanent Differences");
        sheet.setValue(1, 0, "Permanent Differences");
        sheet.setValue(2, 0, "4P01 - Club Dues");
        sheet.setValue(3, 0, "4P02 - Business Gifts");
        sheet.setValue(4, 0, "4P03 - Int Inc-Muni Borads");
        sheet.setValue(5, 0, "4P04 - Lobbying Expense");
        sheet.setValue(6, 0, "4P05 - Skybox");
        sheet.setValue(7, 0, "4P06 - Stock Options-Perm");
        sheet.setValue(8, 0, "4P07 - M&E");
        sheet.setValue(9, 0, "Total Permanent Differences");
        sheet.setValue(10, 0, "Capital Loss Limitation");
        sheet.setValue(11, 0, "Capital Gain/Loss, Sum included in Book income");
        sheet.setValue(12, 0, "Capital Loss Disallowed");
        sheet.setValue(13, 0, "Charitable Contribution Limitation");
        sheet.setValue(14, 0, "Charitable Contributions included in Book income");
        sheet.setValue(15, 0, "Demestic production activities deduction included in Book income");
        sheet.setValue(16, 0, "Fedeeral Taxable Income Limitation");
        sheet.setValue(17, 0, "Limitation percentage");
        sheet.setValue(18, 0, "Charitable Contribution limitation");
        sheet.setValue(19, 0, "Charitable Contributions disallowed");
        sheet.setValue(20, 0, "Federal Taxable Income before Net Operating Loss Deduction");
        sheet.rowOutlines.group(1, 9);
        sheet.rowOutlines.group(3, 8);
        sheet.rowOutlines.group(12, 2);
        sheet.rowOutlines.group(15, 6);
        sheet.getRange(-1, 0, -1, 1).width(300);
        sheet.showRowOutline(true);


        //sheet.getRange(-1, 1, -1, 1).cellType(new ColorCellType());
        //var A = 30;
        //var B = 30000;
        //var lev = 1;
        //var secondlev = 1;
        //for (var i = 0; i < 21; i++) {
        //    var level = sheet.rowOutlines.getLevel(i);
        //    if (level == -1) {
        //        lev = 1;
        //        secondlev = 1;
        //        sheet.setValue(i, 1, "---");
        //    }
        //    else if (level == 0) {
        //        sheet.setValue(i, 1, "00" + lev);
        //        lev++;
        //        secondlev = 1;
        //    }
        //    else {
        //        sheet.setValue(i, 1, "00" + lev + "00" + secondlev);
        //        secondlev++;
        //    }

        //    sheet.setValue(i, 2, "m3");
        //    sheet.setValue(i, 3, (500 - 1) * Math.random() + 1);
        //    sheet.getCell(i, 3).formatter("#,##0.00");
        //    sheet.setValue(i, 4, (B - A) * Math.random() + A);
        //    sheet.getCell(i, 4).formatter("#,##0.00");
        //    sheet.setFormula(i, 5, '=D' + (i + 1).toString() + '*E' + (i + 1).toString());
        //    sheet.getCell(i, 5).formatter("¥#,##0.00");
        //}

        var h = ns.SheetArea.colHeader;

        sheet.setColumnCount(6, h);
        sheet.setColumnCount(6, GC.Spread.Sheets.SheetArea.viewport);

        sheet.setRowCount(2, h);

        sheet.addSpan(0, 0, 2, 1, h);
        sheet.setValue(0, 0, "任务(TA)编码", h);

        sheet.addSpan(0, 1, 2, 1, h);
        sheet.setValue(0, 1, "任务(TA)名称", h);

        sheet.addSpan(0, 2, 2, 1, h);
        sheet.setValue(0, 2, "任务(TA)英文名称", h);

        sheet.addSpan(0, 3, 1, 3, h);
        sheet.setValue(0, 3, "其他", h);

        sheet.setValue(1, 3, "类型", h);
        sheet.setValue(1, 4, "排序号", h);
        sheet.setValue(1, 5, "备注", h);

        //sheet.getRange(-1, 1, -1, 2).width(150);
        //sheet.getRange(-1, 3, -1, 4).width(100);
        //sheet.getRange(-1, 5, -1, 5).width(300);
        sheet.setRowCount(0);
        sheet.getRange(-1, 1, -1, 1).hAlign(ns.HorizontalAlign.left);

        sheet.resumeEvent();
        sheet.resumePaint(false);


        $('#main_box').resize(function () {
            spread.refresh();
        });
        
        var TA_KEY_ColInfo = { name: 'TA_KEY_', displayName: '任务(TA)编码', width: 150 };
        var TA_NAME_ColInfo = { name: 'TA_NAME_', displayName: '任务(TA)名称', width: 150 };
        var TA_NAME_ENColInfo = { name: 'TA_NAME_EN', displayName: '任务(TA)英文名称', width: 150 };
        var TA_TYPEIDColInfo = { name: 'TA_TYPEID', displayName: '类型', width: 100 };
        var SORT_NO_ColInfo = { name: 'SORT_NO_', displayName: '排序号', width: 100 };
        var NoteColInfo = { name: 'Note', displayName: '备注', width: 200 };

        $.get('/CNYD_SYS_TA_TREE/GetProInfo', function (result) {
            $("#Choise_PJ").select2({
                data: result.data,
                language: "zh-CN",
                placeholder: "请选择工程..."
            }).val(null).trigger("change");
        });

        $("#Choise_PJ").on("select2:select", function (e) {
            var PJ_ID_ = $("#Choise_PJ").val();
            $.get('/CNYD_SYS_TA_TREE/GetTA_Struct', { 'PJ_ID_': PJ_ID_ }, function (result) {
                if (result.data.length > 0) {

                    sheet.autoGenerateColumns = false;
                    //sheet.setDataSource(result.data);
                    //sheet.bindColumn(0, TA_KEY_ColInfo);
                    //sheet.bindColumn(1, TA_NAME_ColInfo);
                    //sheet.bindColumn(2, TA_NAME_ENColInfo);
                    //sheet.bindColumn(3, TA_TYPEIDColInfo);
                    //sheet.bindColumn(4, SORT_NO_ColInfo);
                    //sheet.bindColumn(5, NoteColInfo);
                    sheet.suspendPaint();
                    $.each(result.data, function (i, val) {
                        sheet.addRows(i, 1);
                        sheet.setValue(i, 0, val.TA_KEY_);
                        
                    });
                    sheet.addRows(sheet.getRowCount(), 1);
                    sheet.rowOutlines.group(1, 6);
                    sheet.rowOutlines.group(2, 3);
                    sheet.resumePaint(false);
                }
            });
        });

        $('#btn_add').click(function () {
            sheet.suspendPaint();
            sheet.addRows(sheet.getActiveRowIndex() + 1, 1);
            sheet.rowOutlines.group(2, 4);
            sheet.resumePaint(false);
        });
    });


</script>
